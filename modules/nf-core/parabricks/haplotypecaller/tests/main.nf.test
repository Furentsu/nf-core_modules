nextflow_process {

    name "Test Process PARABRICKS_HAPLOTYPECALLER"
    script "../main.nf"
    process "PARABRICKS_HAPLOTYPECALLER"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/haplotypecaller"

    test("sarscov2 - bam - no_intervals") {
        config "./cp-nextflow.config"
        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                            [ id:'index' ],
                            []
                ]
                input[2] = [
                            [ id:'intervals' ],
                            []
                ]
                input[3] = [
                            [ id:'reference' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - bam - intervals") {
        config "./cp-nextflow.config"
        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                            [ id:'index' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[2] = [
                            [ id:'intervals' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[3] = [
                            [ id:'reference' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - bam - gvcf") {
        config "./nextflow.config"
        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                            [ id:'index' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[2] = [
                            [ id:'intervals' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[3] = [
                            [ id:'reference' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    path(process.out.vcf[0][1]).vcf.variantsMD5,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("sarscov2 - bam - stub") {
        config "./cp-nextflow.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                            [ id:'index' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[2] = [
                            [ id:'intervals' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[3] = [
                            [ id:'reference' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("sarscov2 - bam - gvcf - stub") {
        config "./nextflow.config"
        options "-stub"

        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam', checkIfExists: true)
                ]
                input[1] = [
                            [ id:'index' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/bam/test.paired_end.sorted.bam.bai', checkIfExists: true)
                ]
                input[2] = [
                            [ id:'intervals' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/bed/test.bed', checkIfExists: true)
                ]
                input[3] = [
                            [ id:'reference' ],
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}

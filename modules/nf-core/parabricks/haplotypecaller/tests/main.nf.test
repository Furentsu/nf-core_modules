nextflow_process {

    name "Test Process PARABRICKS_HAPLOTYPECALLER"
    script "../main.nf"
    process "PARABRICKS_HAPLOTYPECALLER"

    tag "modules"
    tag "modules_nfcore"
    tag "parabricks"
    tag "parabricks/haplotypecaller"

    test("homo_sapiens - bam - no_intervals") {

        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/illumina/test2_paired_end_recalibrated_sorted_bam', checkIfExists: true) ]
                ]
                input[1] = [
                            [ id:'index' ],
                            []
                ]
                input[2] = [
                            [ id:'intervals' ],
                            []
                ]
                input[3] = [
                            [ id:'reference' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf).getReadsMD5(),
                    file(process.out.vcf).name,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - bam - intervals") {

        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test2_paired_end_recalibrated_sorted_bam', checkIfExists: true) ]
                ]
                input[1] = [
                            [ id:'index' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test2_paired_end_recalibrated_sorted_bam_bai', checkIfExists: true) ]
                ]
                input[2] = [
                            [ id:'intervals' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_21_multi_interval_bed', checkIfExists: true) ]
                ]
                input[3] = [
                            [ id:'reference' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf).getReadsMD5(),
                    file(process.out.vcf).name,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - bam - gvcf") {

        params {
            ext.args = "--gvcf"
        }

        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test2_paired_end_recalibrated_sorted_bam', checkIfExists: true) ]
                ]
                input[1] = [
                            [ id:'index' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test2_paired_end_recalibrated_sorted_bam_bai', checkIfExists: true) ]
                ]
                input[2] = [
                            [ id:'intervals' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_21_multi_interval_bed', checkIfExists: true) ]
                ]
                input[3] = [
                            [ id:'reference' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    file(process.out.vcf).getReadsMD5(),
                    file(process.out.vcf).name,
                    process.out.versions
                ).match() }
            )
        }

    }

    test("homo_sapiens - bam - stub") {

        options "-stub"

        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test2_paired_end_recalibrated_sorted_bam', checkIfExists: true) ]
                ]
                input[1] = [
                            [ id:'index' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test2_paired_end_recalibrated_sorted_bam_bai', checkIfExists: true) ]
                ]
                input[2] = [
                            [ id:'intervals' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_21_multi_interval_bed', checkIfExists: true) ]
                ]
                input[3] = [
                            [ id:'reference' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

    test("homo_sapiens - bam - gvcf - stub") {

        options "-stub"

        params {
            ext.args = "--gvcf"
        }
        
        when {
            process {
                """
                input[0] = [
                            [ id:'test' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test2_paired_end_recalibrated_sorted_bam', checkIfExists: true) ]
                ]
                input[1] = [
                            [ id:'index' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/test2_paired_end_recalibrated_sorted_bam_bai', checkIfExists: true) ]
                ]
                input[2] = [
                            [ id:'intervals' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome_21_multi_interval_bed', checkIfExists: true) ]
                ]
                input[3] = [
                            [ id:'reference' ],
                            [ file(params.modules_testdata_base_path + 'genomics/homo_sapiens/genome/genome.fasta', checkIfExists: true) ]
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }

    }

}
